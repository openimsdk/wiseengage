// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.26.0
// source: customerservice/customerservice.proto

package customerservice

import (
	common "github.com/openimsdk/wiseengage/v1/pkg/protocol/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterCustomerReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	NickName      string                 `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName"`
	FaceURL       string                 `protobuf:"bytes,3,opt,name=FaceURL,proto3" json:"FaceURL"`
	Ex            string                 `protobuf:"bytes,4,opt,name=Ex,proto3" json:"Ex"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterCustomerReq) Reset() {
	*x = RegisterCustomerReq{}
	mi := &file_customerservice_customerservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterCustomerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCustomerReq) ProtoMessage() {}

func (x *RegisterCustomerReq) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCustomerReq.ProtoReflect.Descriptor instead.
func (*RegisterCustomerReq) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterCustomerReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RegisterCustomerReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *RegisterCustomerReq) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *RegisterCustomerReq) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type RegisterCustomerResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterCustomerResp) Reset() {
	*x = RegisterCustomerResp{}
	mi := &file_customerservice_customerservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterCustomerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCustomerResp) ProtoMessage() {}

func (x *RegisterCustomerResp) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCustomerResp.ProtoReflect.Descriptor instead.
func (*RegisterCustomerResp) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterCustomerResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type StartConsultationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	AgentType     string                 `protobuf:"bytes,2,opt,name=agentType,proto3" json:"agentType"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartConsultationReq) Reset() {
	*x = StartConsultationReq{}
	mi := &file_customerservice_customerservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartConsultationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartConsultationReq) ProtoMessage() {}

func (x *StartConsultationReq) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartConsultationReq.ProtoReflect.Descriptor instead.
func (*StartConsultationReq) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{2}
}

func (x *StartConsultationReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *StartConsultationReq) GetAgentType() string {
	if x != nil {
		return x.AgentType
	}
	return ""
}

type StartConsultationResp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConversationID string                 `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StartConsultationResp) Reset() {
	*x = StartConsultationResp{}
	mi := &file_customerservice_customerservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartConsultationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartConsultationResp) ProtoMessage() {}

func (x *StartConsultationResp) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartConsultationResp.ProtoReflect.Descriptor instead.
func (*StartConsultationResp) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{3}
}

func (x *StartConsultationResp) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

type UpdateSendMsgTimeReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConversationID string                 `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	UserID         string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	MsgID          string                 `protobuf:"bytes,3,opt,name=msgID,proto3" json:"msgID"`
	SendTime       int64                  `protobuf:"varint,4,opt,name=sendTime,proto3" json:"sendTime"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateSendMsgTimeReq) Reset() {
	*x = UpdateSendMsgTimeReq{}
	mi := &file_customerservice_customerservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSendMsgTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSendMsgTimeReq) ProtoMessage() {}

func (x *UpdateSendMsgTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSendMsgTimeReq.ProtoReflect.Descriptor instead.
func (*UpdateSendMsgTimeReq) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSendMsgTimeReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *UpdateSendMsgTimeReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateSendMsgTimeReq) GetMsgID() string {
	if x != nil {
		return x.MsgID
	}
	return ""
}

func (x *UpdateSendMsgTimeReq) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

type UpdateSendMsgTimeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSendMsgTimeResp) Reset() {
	*x = UpdateSendMsgTimeResp{}
	mi := &file_customerservice_customerservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSendMsgTimeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSendMsgTimeResp) ProtoMessage() {}

func (x *UpdateSendMsgTimeResp) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSendMsgTimeResp.ProtoReflect.Descriptor instead.
func (*UpdateSendMsgTimeResp) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{5}
}

type UpdateConversationClosedReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserID         string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	ConversationID string                 `protobuf:"bytes,2,opt,name=conversationID,proto3" json:"conversationID"`
	Version        int64                  `protobuf:"varint,3,opt,name=version,proto3" json:"version"`
	Timeout        bool                   `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout"`
	Cause          string                 `protobuf:"bytes,5,opt,name=cause,proto3" json:"cause"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateConversationClosedReq) Reset() {
	*x = UpdateConversationClosedReq{}
	mi := &file_customerservice_customerservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConversationClosedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationClosedReq) ProtoMessage() {}

func (x *UpdateConversationClosedReq) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationClosedReq.ProtoReflect.Descriptor instead.
func (*UpdateConversationClosedReq) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateConversationClosedReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateConversationClosedReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *UpdateConversationClosedReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UpdateConversationClosedReq) GetTimeout() bool {
	if x != nil {
		return x.Timeout
	}
	return false
}

func (x *UpdateConversationClosedReq) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

type UpdateConversationClosedResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConversationClosedResp) Reset() {
	*x = UpdateConversationClosedResp{}
	mi := &file_customerservice_customerservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConversationClosedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationClosedResp) ProtoMessage() {}

func (x *UpdateConversationClosedResp) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationClosedResp.ProtoReflect.Descriptor instead.
func (*UpdateConversationClosedResp) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{7}
}

type ChangeConversationRoleReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserID         string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	ConversationID string                 `protobuf:"bytes,2,opt,name=conversationID,proto3" json:"conversationID"`
	Role           string                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ChangeConversationRoleReq) Reset() {
	*x = ChangeConversationRoleReq{}
	mi := &file_customerservice_customerservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeConversationRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConversationRoleReq) ProtoMessage() {}

func (x *ChangeConversationRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConversationRoleReq.ProtoReflect.Descriptor instead.
func (*ChangeConversationRoleReq) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{8}
}

func (x *ChangeConversationRoleReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ChangeConversationRoleReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *ChangeConversationRoleReq) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type ChangeConversationRoleResp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserID         string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	ConversationID string                 `protobuf:"bytes,2,opt,name=conversationID,proto3" json:"conversationID"`
	Role           string                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ChangeConversationRoleResp) Reset() {
	*x = ChangeConversationRoleResp{}
	mi := &file_customerservice_customerservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeConversationRoleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConversationRoleResp) ProtoMessage() {}

func (x *ChangeConversationRoleResp) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConversationRoleResp.ProtoReflect.Descriptor instead.
func (*ChangeConversationRoleResp) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{9}
}

func (x *ChangeConversationRoleResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ChangeConversationRoleResp) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *ChangeConversationRoleResp) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type AgentMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContentType   int32                  `protobuf:"varint,1,opt,name=contentType,proto3" json:"contentType"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentMessage) Reset() {
	*x = AgentMessage{}
	mi := &file_customerservice_customerservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMessage) ProtoMessage() {}

func (x *AgentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMessage.ProtoReflect.Descriptor instead.
func (*AgentMessage) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{10}
}

func (x *AgentMessage) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *AgentMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type AgentInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Nickname      string                 `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	FaceURL       string                 `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`
	AgentType     string                 `protobuf:"bytes,4,opt,name=agentType,proto3" json:"agentType"`
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status"`
	StartMsg      *AgentMessage          `protobuf:"bytes,6,opt,name=startMsg,proto3" json:"startMsg"`
	EndMsg        *AgentMessage          `protobuf:"bytes,7,opt,name=endMsg,proto3" json:"endMsg"`
	TimeoutMsg    *AgentMessage          `protobuf:"bytes,8,opt,name=timeoutMsg,proto3" json:"timeoutMsg"`
	CreateTime    int64                  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentInfo) Reset() {
	*x = AgentInfo{}
	mi := &file_customerservice_customerservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInfo) ProtoMessage() {}

func (x *AgentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInfo.ProtoReflect.Descriptor instead.
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{11}
}

func (x *AgentInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AgentInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *AgentInfo) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *AgentInfo) GetAgentType() string {
	if x != nil {
		return x.AgentType
	}
	return ""
}

func (x *AgentInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AgentInfo) GetStartMsg() *AgentMessage {
	if x != nil {
		return x.StartMsg
	}
	return nil
}

func (x *AgentInfo) GetEndMsg() *AgentMessage {
	if x != nil {
		return x.EndMsg
	}
	return nil
}

func (x *AgentInfo) GetTimeoutMsg() *AgentMessage {
	if x != nil {
		return x.TimeoutMsg
	}
	return nil
}

func (x *AgentInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type CreateAgentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Agent         *AgentInfo             `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAgentReq) Reset() {
	*x = CreateAgentReq{}
	mi := &file_customerservice_customerservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentReq) ProtoMessage() {}

func (x *CreateAgentReq) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentReq.ProtoReflect.Descriptor instead.
func (*CreateAgentReq) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{12}
}

func (x *CreateAgentReq) GetAgent() *AgentInfo {
	if x != nil {
		return x.Agent
	}
	return nil
}

type CreateAgentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAgentResp) Reset() {
	*x = CreateAgentResp{}
	mi := &file_customerservice_customerservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentResp) ProtoMessage() {}

func (x *CreateAgentResp) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentResp.ProtoReflect.Descriptor instead.
func (*CreateAgentResp) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{13}
}

type UpdateAgentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Nickname      *string                `protobuf:"bytes,2,opt,name=nickname,proto3,oneof" json:"nickname"`
	FaceURL       *string                `protobuf:"bytes,3,opt,name=faceURL,proto3,oneof" json:"faceURL"`
	Status        *int32                 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status"`
	StartMsg      *AgentMessage          `protobuf:"bytes,5,opt,name=startMsg,proto3" json:"startMsg"`
	EndMsg        *AgentMessage          `protobuf:"bytes,6,opt,name=endMsg,proto3" json:"endMsg"`
	TimeoutMsg    *AgentMessage          `protobuf:"bytes,7,opt,name=timeoutMsg,proto3" json:"timeoutMsg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAgentReq) Reset() {
	*x = UpdateAgentReq{}
	mi := &file_customerservice_customerservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentReq) ProtoMessage() {}

func (x *UpdateAgentReq) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentReq.ProtoReflect.Descriptor instead.
func (*UpdateAgentReq) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateAgentReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateAgentReq) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *UpdateAgentReq) GetFaceURL() string {
	if x != nil && x.FaceURL != nil {
		return *x.FaceURL
	}
	return ""
}

func (x *UpdateAgentReq) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UpdateAgentReq) GetStartMsg() *AgentMessage {
	if x != nil {
		return x.StartMsg
	}
	return nil
}

func (x *UpdateAgentReq) GetEndMsg() *AgentMessage {
	if x != nil {
		return x.EndMsg
	}
	return nil
}

func (x *UpdateAgentReq) GetTimeoutMsg() *AgentMessage {
	if x != nil {
		return x.TimeoutMsg
	}
	return nil
}

type UpdateAgentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAgentResp) Reset() {
	*x = UpdateAgentResp{}
	mi := &file_customerservice_customerservice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentResp) ProtoMessage() {}

func (x *UpdateAgentResp) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentResp.ProtoReflect.Descriptor instead.
func (*UpdateAgentResp) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{15}
}

type PageFindAgentReq struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Pagination    *common.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
	Status        []string                  `protobuf:"bytes,2,rep,name=status,proto3" json:"status"`
	AgentTypes    []string                  `protobuf:"bytes,3,rep,name=agentTypes,proto3" json:"agentTypes"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageFindAgentReq) Reset() {
	*x = PageFindAgentReq{}
	mi := &file_customerservice_customerservice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageFindAgentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageFindAgentReq) ProtoMessage() {}

func (x *PageFindAgentReq) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageFindAgentReq.ProtoReflect.Descriptor instead.
func (*PageFindAgentReq) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{16}
}

func (x *PageFindAgentReq) GetPagination() *common.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *PageFindAgentReq) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PageFindAgentReq) GetAgentTypes() []string {
	if x != nil {
		return x.AgentTypes
	}
	return nil
}

type PageFindAgentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Agents        []*AgentInfo           `protobuf:"bytes,2,rep,name=Agents,proto3" json:"Agents"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageFindAgentResp) Reset() {
	*x = PageFindAgentResp{}
	mi := &file_customerservice_customerservice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageFindAgentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageFindAgentResp) ProtoMessage() {}

func (x *PageFindAgentResp) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageFindAgentResp.ProtoReflect.Descriptor instead.
func (*PageFindAgentResp) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{17}
}

func (x *PageFindAgentResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PageFindAgentResp) GetAgents() []*AgentInfo {
	if x != nil {
		return x.Agents
	}
	return nil
}

type CallbackAfterSendSingleMsgCommandReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConversationID string                 `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	UserID         string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	MsgID          string                 `protobuf:"bytes,3,opt,name=msgID,proto3" json:"msgID"`
	SendTime       int64                  `protobuf:"varint,4,opt,name=sendTime,proto3" json:"sendTime"`
	Content        string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content"`
	ContentType    int32                  `protobuf:"varint,6,opt,name=contentType,proto3" json:"contentType"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CallbackAfterSendSingleMsgCommandReq) Reset() {
	*x = CallbackAfterSendSingleMsgCommandReq{}
	mi := &file_customerservice_customerservice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallbackAfterSendSingleMsgCommandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackAfterSendSingleMsgCommandReq) ProtoMessage() {}

func (x *CallbackAfterSendSingleMsgCommandReq) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackAfterSendSingleMsgCommandReq.ProtoReflect.Descriptor instead.
func (*CallbackAfterSendSingleMsgCommandReq) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{18}
}

func (x *CallbackAfterSendSingleMsgCommandReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *CallbackAfterSendSingleMsgCommandReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CallbackAfterSendSingleMsgCommandReq) GetMsgID() string {
	if x != nil {
		return x.MsgID
	}
	return ""
}

func (x *CallbackAfterSendSingleMsgCommandReq) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *CallbackAfterSendSingleMsgCommandReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CallbackAfterSendSingleMsgCommandReq) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

type CallbackAfterSendSingleMsgCommandResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallbackAfterSendSingleMsgCommandResp) Reset() {
	*x = CallbackAfterSendSingleMsgCommandResp{}
	mi := &file_customerservice_customerservice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallbackAfterSendSingleMsgCommandResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackAfterSendSingleMsgCommandResp) ProtoMessage() {}

func (x *CallbackAfterSendSingleMsgCommandResp) ProtoReflect() protoreflect.Message {
	mi := &file_customerservice_customerservice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackAfterSendSingleMsgCommandResp.ProtoReflect.Descriptor instead.
func (*CallbackAfterSendSingleMsgCommandResp) Descriptor() ([]byte, []int) {
	return file_customerservice_customerservice_proto_rawDescGZIP(), []int{19}
}

var File_customerservice_customerservice_proto protoreflect.FileDescriptor

var file_customerservice_customerservice_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x73, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x61,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x45, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x45, 0x78, 0x22, 0x2e, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x3f, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x17,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x6f, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0x70, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x96, 0x03, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x47, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67,
	0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x06, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x4f, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x05, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22,
	0x11, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x90, 0x03, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1f, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x47, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x12, 0x4f, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65,
	0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x6f, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x44, 0x0a,
	0x06, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x24, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x32, 0x80, 0x0a, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x86, 0x01,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x38, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77,
	0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x9b, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x3e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x3f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x95, 0x01,
	0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69,
	0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x7a, 0x0a, 0x0d, 0x50, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65,
	0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0xb6, 0x01,
	0x0a, 0x21, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x6e, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73,
	0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x48, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x77, 0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x77,
	0x69, 0x73, 0x65, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_customerservice_customerservice_proto_rawDescOnce sync.Once
	file_customerservice_customerservice_proto_rawDescData = file_customerservice_customerservice_proto_rawDesc
)

func file_customerservice_customerservice_proto_rawDescGZIP() []byte {
	file_customerservice_customerservice_proto_rawDescOnce.Do(func() {
		file_customerservice_customerservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_customerservice_customerservice_proto_rawDescData)
	})
	return file_customerservice_customerservice_proto_rawDescData
}

var file_customerservice_customerservice_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_customerservice_customerservice_proto_goTypes = []any{
	(*RegisterCustomerReq)(nil),                   // 0: openim.wiseengage.customerservice.RegisterCustomerReq
	(*RegisterCustomerResp)(nil),                  // 1: openim.wiseengage.customerservice.RegisterCustomerResp
	(*StartConsultationReq)(nil),                  // 2: openim.wiseengage.customerservice.StartConsultationReq
	(*StartConsultationResp)(nil),                 // 3: openim.wiseengage.customerservice.StartConsultationResp
	(*UpdateSendMsgTimeReq)(nil),                  // 4: openim.wiseengage.customerservice.UpdateSendMsgTimeReq
	(*UpdateSendMsgTimeResp)(nil),                 // 5: openim.wiseengage.customerservice.UpdateSendMsgTimeResp
	(*UpdateConversationClosedReq)(nil),           // 6: openim.wiseengage.customerservice.UpdateConversationClosedReq
	(*UpdateConversationClosedResp)(nil),          // 7: openim.wiseengage.customerservice.UpdateConversationClosedResp
	(*ChangeConversationRoleReq)(nil),             // 8: openim.wiseengage.customerservice.ChangeConversationRoleReq
	(*ChangeConversationRoleResp)(nil),            // 9: openim.wiseengage.customerservice.ChangeConversationRoleResp
	(*AgentMessage)(nil),                          // 10: openim.wiseengage.customerservice.AgentMessage
	(*AgentInfo)(nil),                             // 11: openim.wiseengage.customerservice.AgentInfo
	(*CreateAgentReq)(nil),                        // 12: openim.wiseengage.customerservice.CreateAgentReq
	(*CreateAgentResp)(nil),                       // 13: openim.wiseengage.customerservice.CreateAgentResp
	(*UpdateAgentReq)(nil),                        // 14: openim.wiseengage.customerservice.UpdateAgentReq
	(*UpdateAgentResp)(nil),                       // 15: openim.wiseengage.customerservice.UpdateAgentResp
	(*PageFindAgentReq)(nil),                      // 16: openim.wiseengage.customerservice.PageFindAgentReq
	(*PageFindAgentResp)(nil),                     // 17: openim.wiseengage.customerservice.PageFindAgentResp
	(*CallbackAfterSendSingleMsgCommandReq)(nil),  // 18: openim.wiseengage.customerservice.callbackAfterSendSingleMsgCommandReq
	(*CallbackAfterSendSingleMsgCommandResp)(nil), // 19: openim.wiseengage.customerservice.callbackAfterSendSingleMsgCommandResp
	(*common.RequestPagination)(nil),              // 20: openim.wiseengage.common.RequestPagination
}
var file_customerservice_customerservice_proto_depIdxs = []int32{
	10, // 0: openim.wiseengage.customerservice.AgentInfo.startMsg:type_name -> openim.wiseengage.customerservice.AgentMessage
	10, // 1: openim.wiseengage.customerservice.AgentInfo.endMsg:type_name -> openim.wiseengage.customerservice.AgentMessage
	10, // 2: openim.wiseengage.customerservice.AgentInfo.timeoutMsg:type_name -> openim.wiseengage.customerservice.AgentMessage
	11, // 3: openim.wiseengage.customerservice.CreateAgentReq.agent:type_name -> openim.wiseengage.customerservice.AgentInfo
	10, // 4: openim.wiseengage.customerservice.UpdateAgentReq.startMsg:type_name -> openim.wiseengage.customerservice.AgentMessage
	10, // 5: openim.wiseengage.customerservice.UpdateAgentReq.endMsg:type_name -> openim.wiseengage.customerservice.AgentMessage
	10, // 6: openim.wiseengage.customerservice.UpdateAgentReq.timeoutMsg:type_name -> openim.wiseengage.customerservice.AgentMessage
	20, // 7: openim.wiseengage.customerservice.PageFindAgentReq.pagination:type_name -> openim.wiseengage.common.RequestPagination
	11, // 8: openim.wiseengage.customerservice.PageFindAgentResp.Agents:type_name -> openim.wiseengage.customerservice.AgentInfo
	0,  // 9: openim.wiseengage.customerservice.customerservice.RegisterCustomer:input_type -> openim.wiseengage.customerservice.RegisterCustomerReq
	2,  // 10: openim.wiseengage.customerservice.customerservice.StartConsultation:input_type -> openim.wiseengage.customerservice.StartConsultationReq
	4,  // 11: openim.wiseengage.customerservice.customerservice.UpdateSendMsgTime:input_type -> openim.wiseengage.customerservice.UpdateSendMsgTimeReq
	6,  // 12: openim.wiseengage.customerservice.customerservice.UpdateConversationClosed:input_type -> openim.wiseengage.customerservice.UpdateConversationClosedReq
	8,  // 13: openim.wiseengage.customerservice.customerservice.ChangeConversationRole:input_type -> openim.wiseengage.customerservice.ChangeConversationRoleReq
	12, // 14: openim.wiseengage.customerservice.customerservice.CreateAgent:input_type -> openim.wiseengage.customerservice.CreateAgentReq
	14, // 15: openim.wiseengage.customerservice.customerservice.UpdateAgent:input_type -> openim.wiseengage.customerservice.UpdateAgentReq
	16, // 16: openim.wiseengage.customerservice.customerservice.PageFindAgent:input_type -> openim.wiseengage.customerservice.PageFindAgentReq
	18, // 17: openim.wiseengage.customerservice.customerservice.callbackAfterSendSingleMsgCommand:input_type -> openim.wiseengage.customerservice.callbackAfterSendSingleMsgCommandReq
	1,  // 18: openim.wiseengage.customerservice.customerservice.RegisterCustomer:output_type -> openim.wiseengage.customerservice.RegisterCustomerResp
	3,  // 19: openim.wiseengage.customerservice.customerservice.StartConsultation:output_type -> openim.wiseengage.customerservice.StartConsultationResp
	5,  // 20: openim.wiseengage.customerservice.customerservice.UpdateSendMsgTime:output_type -> openim.wiseengage.customerservice.UpdateSendMsgTimeResp
	7,  // 21: openim.wiseengage.customerservice.customerservice.UpdateConversationClosed:output_type -> openim.wiseengage.customerservice.UpdateConversationClosedResp
	9,  // 22: openim.wiseengage.customerservice.customerservice.ChangeConversationRole:output_type -> openim.wiseengage.customerservice.ChangeConversationRoleResp
	13, // 23: openim.wiseengage.customerservice.customerservice.CreateAgent:output_type -> openim.wiseengage.customerservice.CreateAgentResp
	15, // 24: openim.wiseengage.customerservice.customerservice.UpdateAgent:output_type -> openim.wiseengage.customerservice.UpdateAgentResp
	17, // 25: openim.wiseengage.customerservice.customerservice.PageFindAgent:output_type -> openim.wiseengage.customerservice.PageFindAgentResp
	19, // 26: openim.wiseengage.customerservice.customerservice.callbackAfterSendSingleMsgCommand:output_type -> openim.wiseengage.customerservice.callbackAfterSendSingleMsgCommandResp
	18, // [18:27] is the sub-list for method output_type
	9,  // [9:18] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_customerservice_customerservice_proto_init() }
func file_customerservice_customerservice_proto_init() {
	if File_customerservice_customerservice_proto != nil {
		return
	}
	file_customerservice_customerservice_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_customerservice_customerservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_customerservice_customerservice_proto_goTypes,
		DependencyIndexes: file_customerservice_customerservice_proto_depIdxs,
		MessageInfos:      file_customerservice_customerservice_proto_msgTypes,
	}.Build()
	File_customerservice_customerservice_proto = out.File
	file_customerservice_customerservice_proto_rawDesc = nil
	file_customerservice_customerservice_proto_goTypes = nil
	file_customerservice_customerservice_proto_depIdxs = nil
}
