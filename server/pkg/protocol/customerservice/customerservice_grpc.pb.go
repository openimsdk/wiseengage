// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.0
// source: customerservice/customerservice.proto

package customerservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Customerservice_RegisterCustomer_FullMethodName         = "/openim.wiseengage.customerservice.customerservice/RegisterCustomer"
	Customerservice_StartConsultation_FullMethodName        = "/openim.wiseengage.customerservice.customerservice/StartConsultation"
	Customerservice_UpdateSendMsgTime_FullMethodName        = "/openim.wiseengage.customerservice.customerservice/UpdateSendMsgTime"
	Customerservice_UpdateConversationClosed_FullMethodName = "/openim.wiseengage.customerservice.customerservice/UpdateConversationClosed"
	Customerservice_ChangeConversationRole_FullMethodName   = "/openim.wiseengage.customerservice.customerservice/ChangeConversationRole"
)

// CustomerserviceClient is the client API for Customerservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerserviceClient interface {
	RegisterCustomer(ctx context.Context, in *RegisterCustomerReq, opts ...grpc.CallOption) (*RegisterCustomerResp, error)
	StartConsultation(ctx context.Context, in *StartConsultationReq, opts ...grpc.CallOption) (*StartConsultationResp, error)
	UpdateSendMsgTime(ctx context.Context, in *UpdateSendMsgTimeReq, opts ...grpc.CallOption) (*UpdateSendMsgTimeResp, error)
	UpdateConversationClosed(ctx context.Context, in *UpdateConversationClosedReq, opts ...grpc.CallOption) (*UpdateConversationClosedResp, error)
	ChangeConversationRole(ctx context.Context, in *ChangeConversationRoleReq, opts ...grpc.CallOption) (*ChangeConversationRoleResp, error)
}

type customerserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerserviceClient(cc grpc.ClientConnInterface) CustomerserviceClient {
	return &customerserviceClient{cc}
}

func (c *customerserviceClient) RegisterCustomer(ctx context.Context, in *RegisterCustomerReq, opts ...grpc.CallOption) (*RegisterCustomerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterCustomerResp)
	err := c.cc.Invoke(ctx, Customerservice_RegisterCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerserviceClient) StartConsultation(ctx context.Context, in *StartConsultationReq, opts ...grpc.CallOption) (*StartConsultationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartConsultationResp)
	err := c.cc.Invoke(ctx, Customerservice_StartConsultation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerserviceClient) UpdateSendMsgTime(ctx context.Context, in *UpdateSendMsgTimeReq, opts ...grpc.CallOption) (*UpdateSendMsgTimeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSendMsgTimeResp)
	err := c.cc.Invoke(ctx, Customerservice_UpdateSendMsgTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerserviceClient) UpdateConversationClosed(ctx context.Context, in *UpdateConversationClosedReq, opts ...grpc.CallOption) (*UpdateConversationClosedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConversationClosedResp)
	err := c.cc.Invoke(ctx, Customerservice_UpdateConversationClosed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerserviceClient) ChangeConversationRole(ctx context.Context, in *ChangeConversationRoleReq, opts ...grpc.CallOption) (*ChangeConversationRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeConversationRoleResp)
	err := c.cc.Invoke(ctx, Customerservice_ChangeConversationRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerserviceServer is the server API for Customerservice service.
// All implementations must embed UnimplementedCustomerserviceServer
// for forward compatibility.
type CustomerserviceServer interface {
	RegisterCustomer(context.Context, *RegisterCustomerReq) (*RegisterCustomerResp, error)
	StartConsultation(context.Context, *StartConsultationReq) (*StartConsultationResp, error)
	UpdateSendMsgTime(context.Context, *UpdateSendMsgTimeReq) (*UpdateSendMsgTimeResp, error)
	UpdateConversationClosed(context.Context, *UpdateConversationClosedReq) (*UpdateConversationClosedResp, error)
	ChangeConversationRole(context.Context, *ChangeConversationRoleReq) (*ChangeConversationRoleResp, error)
	mustEmbedUnimplementedCustomerserviceServer()
}

// UnimplementedCustomerserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomerserviceServer struct{}

func (UnimplementedCustomerserviceServer) RegisterCustomer(context.Context, *RegisterCustomerReq) (*RegisterCustomerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCustomer not implemented")
}
func (UnimplementedCustomerserviceServer) StartConsultation(context.Context, *StartConsultationReq) (*StartConsultationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConsultation not implemented")
}
func (UnimplementedCustomerserviceServer) UpdateSendMsgTime(context.Context, *UpdateSendMsgTimeReq) (*UpdateSendMsgTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSendMsgTime not implemented")
}
func (UnimplementedCustomerserviceServer) UpdateConversationClosed(context.Context, *UpdateConversationClosedReq) (*UpdateConversationClosedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationClosed not implemented")
}
func (UnimplementedCustomerserviceServer) ChangeConversationRole(context.Context, *ChangeConversationRoleReq) (*ChangeConversationRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeConversationRole not implemented")
}
func (UnimplementedCustomerserviceServer) mustEmbedUnimplementedCustomerserviceServer() {}
func (UnimplementedCustomerserviceServer) testEmbeddedByValue()                         {}

// UnsafeCustomerserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerserviceServer will
// result in compilation errors.
type UnsafeCustomerserviceServer interface {
	mustEmbedUnimplementedCustomerserviceServer()
}

func RegisterCustomerserviceServer(s grpc.ServiceRegistrar, srv CustomerserviceServer) {
	// If the following call pancis, it indicates UnimplementedCustomerserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Customerservice_ServiceDesc, srv)
}

func _Customerservice_RegisterCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerserviceServer).RegisterCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customerservice_RegisterCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerserviceServer).RegisterCustomer(ctx, req.(*RegisterCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customerservice_StartConsultation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartConsultationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerserviceServer).StartConsultation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customerservice_StartConsultation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerserviceServer).StartConsultation(ctx, req.(*StartConsultationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customerservice_UpdateSendMsgTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSendMsgTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerserviceServer).UpdateSendMsgTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customerservice_UpdateSendMsgTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerserviceServer).UpdateSendMsgTime(ctx, req.(*UpdateSendMsgTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customerservice_UpdateConversationClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationClosedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerserviceServer).UpdateConversationClosed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customerservice_UpdateConversationClosed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerserviceServer).UpdateConversationClosed(ctx, req.(*UpdateConversationClosedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customerservice_ChangeConversationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeConversationRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerserviceServer).ChangeConversationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customerservice_ChangeConversationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerserviceServer).ChangeConversationRole(ctx, req.(*ChangeConversationRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Customerservice_ServiceDesc is the grpc.ServiceDesc for Customerservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Customerservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openim.wiseengage.customerservice.customerservice",
	HandlerType: (*CustomerserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCustomer",
			Handler:    _Customerservice_RegisterCustomer_Handler,
		},
		{
			MethodName: "StartConsultation",
			Handler:    _Customerservice_StartConsultation_Handler,
		},
		{
			MethodName: "UpdateSendMsgTime",
			Handler:    _Customerservice_UpdateSendMsgTime_Handler,
		},
		{
			MethodName: "UpdateConversationClosed",
			Handler:    _Customerservice_UpdateConversationClosed_Handler,
		},
		{
			MethodName: "ChangeConversationRole",
			Handler:    _Customerservice_ChangeConversationRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customerservice/customerservice.proto",
}
